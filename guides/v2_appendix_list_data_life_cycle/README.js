Ext.data.JsonP.v2_appendix_list_data_life_cycle({"guide":"<h1>List Data Life Cycle</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/v2_appendix_list_data_life_cycle-section-1'>Function Order Overview</a></li>\n<li><a href='#!/guide/v2_appendix_list_data_life_cycle-section-2'>Functions In Detail</a></li>\n<li><a href='#!/guide/v2_appendix_list_data_life_cycle-section-3'>Important View Properties</a></li>\n</ol>\n</div>\n\n<p>Of the three base views List data is the easiest to understand with a clear cut refresh, clear, request, process cycle.</p>\n\n<h2 id='v2_appendix_list_data_life_cycle-section-1'>Function Order Overview</h2>\n\n<ul>\n<li><code>show(options)</code></li>\n<li><code>refreshRequiredFor(options)</code></li>\n<li><code>beforeTransitionTo()</code></li>\n<li><code>clear()</code></li>\n<li><code>transitionTo()</code></li>\n<li><code>configureSearch()</code></li>\n<li><code>_loadPreviousSelections()</code></li>\n<li><code>refresh()</code></li>\n<li><code>requestData()</code></li>\n<li><code>createRequest()</code></li>\n<li><code>onRequestDataSuccess(feed)</code></li>\n<li><code>processFeed(feed)</code></li>\n<li><p><code>hasMoreData()</code></p></li>\n<li><p><code>_onRefresh()</code></p></li>\n</ul>\n\n\n<h2 id='v2_appendix_list_data_life_cycle-section-2'>Functions In Detail</h2>\n\n<ul>\n<li><p>The List view is being shown via <code>view.show(options);</code></p></li>\n<li><p><code>refreshRequiredFor(options)</code> is called and checks the option values vs the current values for the following properties:</p>\n\n<ul>\n<li>stateKey</li>\n<li>where</li>\n<li>query</li>\n<li>resourceKind</li>\n<li>resourcePredicate</li>\n</ul>\n\n\n<p> If any property does not match, then refreshRequired is set to true.</p></li>\n<li><p><code>beforeTransitionTo()</code> is called and it does the following:</p>\n\n<ul>\n<li>Show/Hide search bar based on <code>this.hideSearch</code> or passed via options</li>\n<li>Show/Hide selectors if selections are enabled</li>\n<li>Sets <code>useSingleSelection</code> mode based on options</li>\n<li>Sets <code>enableActions</code> based on options, show/hide actions and force singleSelection if true</li>\n<li>if <code>refreshRequired</code> is true, call <code>clear()</code>, else just clear the selection model</li>\n</ul>\n</li>\n<li><p><code>clear()</code> if called clears the following properties:</p>\n\n<ul>\n<li>_selectionModel</li>\n<li>entries</li>\n<li>feed</li>\n<li>query</li>\n<li>calls searchWidget.clear()</li>\n<li>replaces all <code>listContent</code> DOM nodes with the <code>loadingTemplate</code></li>\n</ul>\n</li>\n<li><p>CSS Transition happens</p></li>\n<li><p><code>transitionTo()</code> is called and does the following:</p>\n\n<ul>\n<li>calls <code>configureSearch()</code> which passes the hashtags and formatter function to the searchWidget</li>\n<li>calls <code>_loadPreviousSelections()</code> which attempts to load any saved selection data back into the selectionModel</li>\n<li>if <code>refreshRequired</code> is true it sets it to false and calls <code>refresh()</code></li>\n</ul>\n</li>\n<li><p><code>refresh()</code> is called, and it calls <code>requestData()</code></p></li>\n<li><p><code>requestData()</code> adds the loading CSS class, create a SData request via <code>createRequest()</code>, executes the query passing in callbacks</p></li>\n<li><p><code>createRequest()</code> creates a <code>Sage.SData.Client.SDataResourceCollectionRequest</code>, for properties it first looks for them in the navigation options, then the view itself. If a property is not defined in either then that property is not set. It looks for the following properties:</p>\n\n<ul>\n<li>pageSize</li>\n<li>contractName</li>\n<li>resourceKind</li>\n<li>resourceProperty</li>\n<li>resourcePredicate</li>\n<li>querySelect (options.select)</li>\n<li>queryInclude (not available via options)</li>\n<li>queryOrderBy (options.orderBy)</li>\n<li>queryWhere (options.where)</li>\n<li>query (not available via options)</li>\n</ul>\n\n\n<p> queryWhere and query will be joined via <code>and</code>.</p></li>\n<li><p>The request was passed three callbacks for the following states: success, failure and aborted. The handlers are: <code>onRequestDataSuccess()</code>, <code>onRequestDataFailure()</code> and <code>onRequestDataAborted()</code>.</p></li>\n<li><p>If request fails <code>onRequestDataFailure()</code> is called and an alert is shown, response added to ErrorManager and loading CSS removed.</p></li>\n<li><p>If the request is cancelled <code>onRequestDataAborted()</code> is called and sets <code>this.options</code> to false which forces refreshRequired to be true on next <code>show()</code>, adds the response to the ErrorManager and removes the loading CSS.</p></li>\n<li><p>If the request succeeds <code>onRequestDataSuccess()</code> is called and it calls <code>processFeed()</code> with the response and removes the loading CSS.</p></li>\n<li><p><code>processFeed()</code> is called with the full SData response and does the following:</p>\n\n<ul>\n<li>stores the response into <code>this.feed</code></li>\n<li>if <code>feed.$totalResults</code> is 0, set the noDataTemplate</li>\n<li>loop <code>feed.$resources</code>\n\n<ul>\n<li>extract the <code>$descriptor</code> and <code>$key</code> from each $resource item</li>\n<li>store the item into <code>this.entries{}</code> using the item $key</li>\n<li>apply the <code>rowTemplate</code> using the item for <code>$</code> and view for <code>$$</code></li>\n<li>place all markup at once into <code>this.contentNode</code></li>\n</ul>\n</li>\n<li>Set the amount of rows remaining text using the following equation:\n <code>$totalResults - $startIndex + $itemsPerPage - 1</code></li>\n<li>Call <code>hasMoreData()</code> to toggle the <code>list-has-more</code> CSS class (which shows the Request Next X Items button)</li>\n</ul>\n</li>\n<li><p><code>hasMoreData()</code> returns true if <code>$startIndex + $itemsPerPage &lt;= $totalResults</code></p></li>\n</ul>\n\n\n<p>List Views subscribe to the global <code>/app/refresh</code> event and connect it to <code>_onRefresh()</code> where it checks if the message object has the <code>resourceKind</code> property and if it does and it matches the List Views' resourceKind set <code>refreshRequired</code> to true. This is how List Views knows to refresh when an Edit View performs a save.</p>\n\n<h2 id='v2_appendix_list_data_life_cycle-section-3'>Important View Properties</h2>\n\n<p><strong>this.feed</strong> - during <code>processFeed()</code> the entire SData response is stored to this.feed.</p>\n\n<p><strong>this.entries</strong> - also during <code>processFeed()</code> each entry is stored to the <code>entries: {}</code> object where the $key of the entry is the key in <code>this.entries</code>.</p>\n\n<p><strong>this.options</strong> - during <code>show()</code> the navigation options are stored after calling <code>refreshRequiredFor</code>.</p>\n","title":"List Life Cycle"});