Ext.data.JsonP.v2_localization_example({"guide":"<h1>Localization Example</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/v2_localization_example-section-1'>Pre-Setup</a></li>\n<li><a href='#!/guide/v2_localization_example-section-2'>Setup</a></li>\n<li><a href='#!/guide/v2_localization_example-section-3'>Exporting Strings</a></li>\n<li><a href='#!/guide/v2_localization_example-section-4'>Translate</a></li>\n<li><a href='#!/guide/v2_localization_example-section-5'>Importing XML</a></li>\n<li><a href='#!/guide/v2_localization_example-section-6'>Applying The Localization</a></li>\n</ol>\n</div>\n\n<p>While the <a href=\"#!/guide/v2_beyond_the_guide_localization\">How To Localize Guide</a> explains it at the high level, this guide will take the completed\n<a href=\"#!/guide/v2_template_guide\">Argos Template</a>, configure the localizer and show the results.</p>\n\n<h2 id='v2_localization_example-section-1'>Pre-Setup</h2>\n\n<p>If you have completed the Argos Template Guide, then you already have the folder structure and needed source files.</p>\n\n<p>1. Create a root folder, for this example we will be using <code>C:\\code\\mobile</code>.</p>\n\n<p>2. In that root folder, download and extract (or git clone) <a href=\"https://github.com/Sage/argos-sdk/zipball/2.0\">Argos-SDK</a> into a new folder named <code>argos-sdk</code>.</p>\n\n<p>3. Create another folder at the same level named 'products'.</p>\n\n<p>4. Within the products folder, download and extract the <a href=\"guides/v2_template_guide/argos-template_guide-complete.zip\">finished Argos-Template</a> into a new folder named <code>argos-template</code>.</p>\n\n<p>5. You should have something like this:</p>\n\n<pre><code>/code/mobile\n            /argos-sdk\n            /products\n                     /argos-template\n</code></pre>\n\n<h2 id='v2_localization_example-section-2'>Setup</h2>\n\n<p>Now that you have all the source files, it's time to get the localizer tool itself.</p>\n\n<p>1. Download and extract the <a href=\"https://github.com/downloads/SageScottsdalePlatform/argos-localizer/argos-localizer-windows.zip\">windows exe bundle</a>, for this example it'll be extracted to <code>C:\\code\\argos-localizer</code>.</p>\n\n<p>2. Duplicate (copy+paste and rename) the file <code>C:\\code\\argos-localizer\\config\\argos-saleslogix.json</code> to the same folder and named <code>argos-template</code>.</p>\n\n<p>3. Open the new config file <code>C:\\code\\argos-localizer\\config\\argos-template.json</code> and find the <code>export</code> key at the top:</p>\n\n<pre><code>\"export\": {\n    \"transform\": \"transforms/argos-saleslogix-export.xslt\",\n    \"path\": \"localization/argos-saleslogix/slx-mobile-strings-beta1.xml\",\n    \"split\": true\n},\n</code></pre>\n\n<p>4. Leave the <code>transform</code> as-is - note that the xml transform path is relative to the argos-localization tool.</p>\n\n<p>5. Change the <code>path</code> to <code>localization/argos-template/mobile-strings.xml</code>:</p>\n\n<pre><code>\"export\": {\n    \"transform\": \"transforms/argos-saleslogix-export.xslt\",\n    \"path\": \"localization/argos-template/mobile-strings.xml\",\n    \"split\": true\n},\n</code></pre>\n\n<p>6. Scroll down to the <code>projects</code> key. Change the second item to point to Argos-Template where its <code>path</code> is the <code>src</code> folder (where all the .js files are):</p>\n\n<pre><code>\"projects\": [{\n    \"name\": \"Argos SDK\",\n    \"path\": \"argos-sdk/src\",\n    \"alias\": \"argos-sdk\"\n},{\n    \"name\": \"Template\",\n    \"path\": \"products/argos-template/src\",\n    \"alias\": \"argos-template\"\n}]\n</code></pre>\n\n<ul>\n<li>Note, if you do not want to include the SDK strings then simply remove it from the projects array, leaving only <code>[{argos-template}]</code>.</li>\n</ul>\n\n\n<p>7. Since <code>path</code> in step 5. is relative to our source code root (<code>C:\\code\\mobile</code>) save the config file and make its two folders:</p>\n\n<pre><code>C:\\code\\mobile\\localization\\\n</code></pre>\n\n<p>and</p>\n\n<pre><code>C:\\code\\mobile\\localization\\argos-template\\\n</code></pre>\n\n<h2 id='v2_localization_example-section-3'>Exporting Strings</h2>\n\n<p>This first step of the tool inspects dojo AMD defined modules and extracts any property that name ends with <code>Text</code>, adding them into a XML file for translation.</p>\n\n<p>1. Run the tool by opening Windows Run (winkey+r) and entering the following command (quotes are not needed unless you have spaces in the path):</p>\n\n<pre><code>\"C:\\code\\argos-localizer\\argos-localizer.exe export --base-path \"C:\\code\\mobile\" --config-path \"C:\\code\\argos-localizer\\config\\argos-template.json\"\n</code></pre>\n\n<p>2. Depending on how many strings it's extracting it may take anywhere from 10-30 seconds, you'll see a command prompt (black window) with the files it is\nparsing.</p>\n\n<p>3. Open the combined XML file: <code>C:\\code\\mobile\\localization\\argos-template\\mobile-strings.xml</code></p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;localization&gt;\n  &lt;data class=\"<a href=\"#!/api/Sage.Platform.Mobile.Calendar\" rel=\"Sage.Platform.Mobile.Calendar\" class=\"docClass\">Sage.Platform.Mobile.Calendar</a>\" property=\"titleText\" type=\"text\"&gt;\n    &lt;description/&gt;\n    &lt;value&gt;Calendar&lt;/value&gt;\n  &lt;/data&gt;\n  &lt;data class=\"<a href=\"#!/api/Sage.Platform.Mobile.Calendar\" rel=\"Sage.Platform.Mobile.Calendar\" class=\"docClass\">Sage.Platform.Mobile.Calendar</a>\" property=\"amText\" type=\"text\"&gt;\n    &lt;description/&gt;\n    &lt;value&gt;AM&lt;/value&gt;\n  &lt;/data&gt;\n\n  ... and so on ...\n</code></pre>\n\n<p>4. The two other XML files generated are the same strings except <code>mobile-strings-text.xml</code> contains only text strings to localize and <code>mobile-strings-format.xml</code>\ncontains only format (date for example) strings to localize. This may help the localization team in deciding what action to take, if not needed the base <code>mobile-strings.xml</code>\nis the combined file.</p>\n\n<h2 id='v2_localization_example-section-4'>Translate</h2>\n\n<p>At this point the localization team/department would duplicate the base xml file and translate the <code>&lt;value&gt;</code> for each data entry, naming the duplicated\nfile with the locale they are translating it into: <code>mobile-strings-de.xml</code>, <code>mobile-strings-fr.xml</code> and so on.</p>\n\n<p>Meaning at the end you should have the base xml file (which is really <code>mobile-strings-en-US.xml</code>) and one (or two if using the split ones) per locale.</p>\n\n<p>For this example duplicate the file to <code>mobile-strings-de.xml</code> and change the <code>titleText</code> for the Home View to <code>Zuhause</code> (the <code>&lt;data&gt;</code> node for\nHome should be near the bottom of your xml file):</p>\n\n<pre><code>&lt;data class=\"Mobile.Template.Views.Home\" property=\"titleText\" type=\"text\"&gt;\n    &lt;description/&gt;\n    &lt;value&gt;Zuhause&lt;/value&gt;\n&lt;/data&gt;\n</code></pre>\n\n<p>Save and continue to Importing XML.</p>\n\n<h2 id='v2_localization_example-section-5'>Importing XML</h2>\n\n<p>The last half of the localization tool takes all the translated XML files and transforms them into javascript.</p>\n\n<p>1. Open the config file as we need to change the import portion: <code>C:\\code\\argos-localizer\\config\\argos-template.json</code></p>\n\n<p>2. Under the <code>import</code> key is the <code>map</code> key which defines the locales we are importing. Currently it has several locales but we only have <code>de</code>.\nGo ahead and delete the others:</p>\n\n<pre><code>\"map\": {\n    \"de\": {\n        \"in\": [\n                \"localization/argos-saleslogix/slx-mobile-strings-beta1-format-de.xml\",\n                \"localization/argos-saleslogix/slx-mobile-strings-beta1-text-de.xml\"\n            ],\n        \"out\": \"localization/argos-saleslogix/de.js\"\n    }\n}\n</code></pre>\n\n<p>3. The <code>in</code> key can be an array pointing the two split files (as seen) or it can be just a string pointing the combined file, change it to be the path of our combined de file:</p>\n\n<pre><code>\"map\": {\n    \"de\": {\n        \"in\": \"localization/argos-template/mobile-strings-de.xml\",\n        \"out\": \"localization/argos-saleslogix/de.js\"\n    }\n}\n</code></pre>\n\n<p>4. Adjust the <code>out</code> key to the path you want the generated javascript file to be. The name of the javascript file must be\nthe <a href=\"http://www.iso.org/iso/country_codes.htm\">ISO 3166</a> country-language code to match:</p>\n\n<pre><code>\"map\": {\n    \"de\": {\n        \"in\": \"localization/argos-template/mobile-strings-de.xml\",\n        \"out\": \"localization/argos-template/de.js\"\n    }\n}\n</code></pre>\n\n<p>5. Leave the transform as is, thats the part that reads the XML but we do need a new template, so change the <code>import</code> <code>template</code> to:</p>\n\n<pre><code>\"import\": {\n    \"transform\": \"transforms/argos-saleslogix-import.xslt\",\n    \"template\": \"templates/argos-template.erb\",\n    \"map\": {\n        \"de\": {\n            \"in\": \"localization/argos-template/mobile-strings-de.xml\",\n            \"out\": \"localization/argos-template/de.js\"\n        }\n    }\n},\n</code></pre>\n\n<p>6. Duplicate and rename <code>C:\\code\\argos-localizer\\templates\\argos-saleslogix.erb</code> to <code>argos-template.erb</code>.</p>\n\n<p>7. Open the new file and adjust the namespaces:</p>\n\n<pre><code>define('localization/template/&lt;%= culture %&gt;', ['localization/&lt;%= culture %&gt;', 'Mobile/Template/ApplicationModule'], function() {\n&lt;% localized.each do |name, object| %&gt;\n\nlocalize(\"&lt;%= name %&gt;\", &lt;%= JSON.pretty_generate(object) %&gt;);\n&lt;% end %&gt;\n});\n</code></pre>\n\n<p>8. We changed the define path which is where the <code>.js</code> file will be placed and the <code>ApplicationModule</code> name to our application module.</p>\n\n<p>9. Open Windows Run (winkey+r) and run the tool with the same options as before but <code>import</code> instead of <code>export</code>:</p>\n\n<pre><code>\"C:\\code\\argos-localizer\\argos-localizer.exe import --base-path \"C:\\code\\mobile\" --config-path \"C:\\code\\argos-localizer\\config\\argos-template.json\"\n</code></pre>\n\n<p>10. You should now have the file <code>C:\\code\\mobile\\localization\\argos-template\\de.js</code> that looks like:</p>\n\n<pre><code>define('localization/template/de', ['localization/de', 'Mobile/Template/ApplicationModule'], function() {\n\nlocalize(\"<a href=\"#!/api/Sage.Platform.Mobile.Calendar\" rel=\"Sage.Platform.Mobile.Calendar\" class=\"docClass\">Sage.Platform.Mobile.Calendar</a>\", {\n  \"titleText\": \"Calendar\",\n  \"amText\": \"AM\",\n  \"pmText\": \"PM\"\n});\n\nlocalize(\"<a href=\"#!/api/Sage.Platform.Mobile.Detail\" rel=\"Sage.Platform.Mobile.Detail\" class=\"docClass\">Sage.Platform.Mobile.Detail</a>\", {\n\n... and so on ....\n</code></pre>\n\n<h2 id='v2_localization_example-section-6'>Applying The Localization</h2>\n\n<p>We have the German javascript translation for our app -- time to add it in and load it up.</p>\n\n<p>1. Copy the <code>de.js</code> file to  <code>C:\\code\\mobile\\products\\argos-template\\localization\\template\\</code>. Make sure it is within the <code>template</code> folder within <code>localization</code>.</p>\n\n<ul>\n<li>The top level localization folder is for non-string localization such as currency, number grouping, decimal symbol, etc.</li>\n</ul>\n\n\n<p>2. Open <code>C:\\code\\mobile\\products\\argos-template\\index-dev.html</code> and scroll down to where it is creating the localization array:</p>\n\n<pre><code>    require([application].concat(configuration), function(application, configuration) {\n        var localization = [\n            'localization/en',\n            'localization/template/en'\n        ];\n</code></pre>\n\n<p>3. Change it from <code>/en</code> to <code>/de</code>:</p>\n\n<pre><code>    require([application].concat(configuration), function(application, configuration) {\n        var localization = [\n            'localization/de',\n            'localization/template/de'\n        ];\n</code></pre>\n\n<p>4. Open <code>index-dev.html</code> and notice the top title:</p>\n\n<p><p><img src=\"guides/v2_localization_example/German_home.png\" alt=\"German Home\"></p></p>\n\n<p>5. Use <code>index-dev.aspx</code> for dynamic server (C#) detection of the locale the browser is running instead of typing it in manually in <code>index-dev.html</code>.</p>\n","title":"Localization Example"});