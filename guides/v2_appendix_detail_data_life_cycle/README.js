Ext.data.JsonP.v2_appendix_detail_data_life_cycle({"guide":"<h1>Detail Data Life Cycle</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/v2_appendix_detail_data_life_cycle-section-1'>Function Order Overview</a></li>\n<li><a href='#!/guide/v2_appendix_detail_data_life_cycle-section-2'>Functions In Detail</a></li>\n<li><a href='#!/guide/v2_appendix_detail_data_life_cycle-section-3'>Important View Properties</a></li>\n</ol>\n</div>\n\n<p>The Detail View has a simplistic data process, namely that it re-constructs itself every time a new key is passed - completely refreshing everything.</p>\n\n<h2 id='v2_appendix_detail_data_life_cycle-section-1'>Function Order Overview</h2>\n\n<ul>\n<li><code>show(options)</code></li>\n<li><code>onShow()</code></li>\n<li><code>refreshRequiredFor(options)</code></li>\n<li><code>ReUI.show()</code></li>\n<li><code>_onLoad(evt, el, o)</code></li>\n<li><code>load()</code></li>\n<li><code>App._beforeViewTransitionTo(view)</code></li>\n<li><code>beforeTransitionTo()</code></li>\n<li><code>clear()</code></li>\n<li>Transition</li>\n<li><code>App._viewTransitionTo()</code></li>\n<li><code>getTools()</code></li>\n<li><code>createToolLayout()</code></li>\n<li><code>transitionTo()</code></li>\n<li><code>refresh()</code></li>\n<li><code>requestData()</code></li>\n<li><code>createRequest()</code></li>\n<li><code>onTransitionTo()</code></li>\n<li>Navigation Saved</li>\n<li>Add loading spinner</li>\n<li><code>onRequestDataSuccess(entry)</code></li>\n<li><code>processEntry(entry)</code></li>\n<li><code>createLayout()</code></li>\n<li><code>processLayout(layout, entry)</code>\n\n<ul>\n<li>any <code>onCreate()</code> defined</li>\n</ul>\n</li>\n<li><p>Remove loading spinner</p></li>\n<li><p><code>_onRefresh()</code></p></li>\n</ul>\n\n\n<h2 id='v2_appendix_detail_data_life_cycle-section-2'>Functions In Detail</h2>\n\n<ul>\n<li><p><code>show(options)</code> - when a Detail view is being navigated to it must pass in the options <code>key</code> and optionally <code>descriptor</code>. Key will be used in the SData query as the resource predicate and <code>descriptor</code> will be set as the top toolbar title. Instead of <code>descriptor</code> you may also pass <code>title</code> to accomplish the same thing. The options will be stored into <code>this.options</code> after onShow and refreshRequiredFor are called.</p></li>\n<li><p><code>onShow</code> function fires.</p></li>\n<li><p><code>refreshRequiredFor(options)</code> this function determines if the Detail view needs to be refreshed. Namely it checks for the navigation options and if present then for the <code>options.key</code> and if it does not match the current <code>this.options.key</code> then to return true which sets <code>this.refreshRequired</code> to true.</p></li>\n<li><p>ReUI now kicks in to handle the transition and navigation history handling. To help handle history the view passes the result of <code>getTag</code> and <code>getContext</code>, the tag will be the unique identifier ($key) and the context will be JSON-serialized and stored into local storage. Context consists of <code>this.options</code>, <code>this.resourceKind</code>, <code>this.options.key</code> and <code>this.options.descriptor</code>. All of it is stored so when a user opens the app it can fully recreate the navigation path with all the options.</p></li>\n<li><p><code>onLoad</code> is called which disconnects the <code>this._loadConnect</code> and calls <code>this.load()</code></p></li>\n<li><p><code>load()</code> is fired.</p></li>\n<li><p><code>App._beforeViewTransitionTo(view)</code> this is at the Application (window.App) level and it handles calling the before transition functions and it clears out all the toolbars.</p></li>\n<li><p><code>onBeforeTransitionTo()</code> is fired, this function is where you will see several views using to do things before the view is shown acting upon <code>this.options</code> and before any data is requested.</p></li>\n<li><p><code>beforeTransitionTo()</code> is function used internally, and it checks if <code>this.refreshRequired</code> is true and if so calls <code>this.clear()</code>.</p></li>\n<li><p><code>clear()</code> as the name suggests empties the content <code>&lt;div&gt;</code> and applies the <code>this.emptyTemplate</code> passing the view as <code>$</code>.</p></li>\n<li><p>ReUI applies CSS transition effect</p></li>\n<li><p><code>App._viewTransitionTo()</code> handles all ReUI transitionTos and first gets the tools from a) <code>view.options.tools</code> or from <code>view.getTools()</code> or sets to blank <code>{}</code>. The tools are then passed to each toolbar by calling the toolbars <code>showTools(tools)</code> function.</p></li>\n<li><p><code>getTools()</code> this calls <code>this.createToolLayout()</code> and passes the result to the customization engine for the tools header.</p></li>\n<li><p><code>createToolLayout()</code> - this should define and return <code>this.tools</code> which is an object where the keys are the names of the toolbars and the values are array of toolbar item definitions.</p></li>\n<li><p><code>transitionTo()</code> the transition effect has now finished and you will see an empty Detail screen. This functions checks if <code>this.refreshRequired</code> is true and if it is, sets it to false and calls <code>this.refresh()</code>.</p></li>\n<li><p><code>refresh()</code> if the user somehow got pass the initial security check (before <code>show()</code>) another check is done and if it fails the <code>this.notAvailableTemplate</code> is applied and nothing else happens. Otherwise it calls <code>this.requestData()</code></p></li>\n<li><p><code>requestData()</code> first sets the <code>panel-loading</code> class on the main container, creates a request via <code>this.createRequest()</code> and calls <code>request.read()</code> binding a successful request to <code>this.onRequestDataSuccess()</code>, failure to <code>this.onRequestDataFailure()</code> and aborted to <code>this.onRequestDataAborted()</code>.</p></li>\n<li><p><code>createRequest()</code> creates an <code>Sage.SData.Client.SDataSingleResourceRequest</code> using the service defined in <code>configuration/development.js</code> (or production.js if running a compiled version). Without going into too much detail it will apply the following properties to the request:</p>\n\n<ul>\n<li><code>this.options.key</code> -> setResourceSelector</li>\n<li><code>this.resourceKind</code> -> setResourceKind</li>\n<li><code>this.querySelect</code> -> setQueryArg</li>\n<li><code>this.queryInclude</code> -> setQueryArg</li>\n<li><code>this.queryOrderBy</code> -> setQueryArg</li>\n<li><code>this.contractName</code> -> setContractName</li>\n</ul>\n</li>\n<li><p><code>onTransitionTo()</code> fires</p></li>\n<li><p>Navigation state is cleaned up and saved to local storage</p></li>\n<li><p>Data request is loading, user see's spinner from the <code>panel-loading</code> css.</p></li>\n<li><p><code>onRequestDataSuccess(entry)</code> we get a response back, <code>this.processEntry</code> is called passing the response and <code>panel-loading</code> class is removed.</p></li>\n<li><p><code>processEntry(entry)</code> stores the entry into <code>this.entry</code>, if entry is null it empties the detail content otherwise it calls <code>this.processLayout</code> passing the result of the customization engine which calls <code>this.createLayout()</code> first.</p></li>\n<li><p><code>createLayout()</code> this is where the definition for <code>this.layout</code> is defined which is an array of sections that have children of rows.</p></li>\n<li><p><code>processLayout(layout, entry)</code> this is the layout engine for detail views and is out of scope for this guide but to cover the key points:</p>\n\n<ul>\n<li><code>children</code> property signifies current object is a \"section\" and to then iterate over the children</li>\n<li><code>include/exclude</code> if defined and opposite of their meaning then the row/section will not be processed at all and it will continue to the next object.</li>\n<li>section and row elements are placed into the DOM as they are defined. Any <code>onCreate</code> callbacks are kept and then called after everything is in the DOM and is called within the scope of the Detail view.</li>\n</ul>\n</li>\n<li><p><code>_onRefresh()</code> all Detail views subscribe to the global <code>/app/refresh</code> event and this function is called. If the global event message has a <code>key</code> defined and it matches the current <code>this.options.key</code> then it means this Detail views object was changed and we need to reload it. It sets <code>this.refreshRequired</code> to true and if the message has <code>descriptor</code> defined it will now use that as the top title.</p></li>\n</ul>\n\n\n<h2 id='v2_appendix_detail_data_life_cycle-section-3'>Important View Properties</h2>\n\n<ul>\n<li><code>this.options</code> - navigation options this view was shown with</li>\n<li><code>this.entry</code> - the response from SData for this view</li>\n</ul>\n\n","title":"Detail Life Cycle"});